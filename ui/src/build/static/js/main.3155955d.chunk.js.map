{"version":3,"sources":["SpeedTestCard.js","Wifi.js","App.js","serviceWorker.js","index.js"],"names":["SpeedTestCard","props","Grid","container","id","item","lg","Card","className","CardContent","Typography","variant","component","CardActions","value","Number","this","state","dl","maxValue","ul","ping","jitter","ip","Component","Wifi","worker","setInterval","postMessage","addEventListener","e","console","log","Worker","JSON","stringify","telemetry_level","time_dl","time_ul","onmessage","data","split","setState","bind","Fab","color","aria-label","onClick","startStop","Button","submitData","App","counter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3155955d.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport './SpeedTestCard.css';\nimport ReactSpeedometer from \"react-d3-speedometer\"\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\n\nclass SpeedTestCard extends Component {\n    componentDidMount() {\n    }\n    render(props) {\n        return (\n            <div>\n                <Grid container id=\"test\">\n                    <Grid item lg={3}>\n                        <Card className=\"testGroup\">\n                            <CardContent>\n                                <Typography variant=\"h5\" component=\"h2\">Download</Typography>\n                            </CardContent>\n                            <CardActions>\n                                <ReactSpeedometer value={Number(this.props.state.dl)} maxValue={10} />\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                    <Grid item lg={3}>\n                        <Card className=\"testGroup\">\n                            <CardContent>\n                                <Typography variant=\"h5\" component=\"h2\">Upload</Typography>\n                            </CardContent>\n                            <CardActions>\n                                <ReactSpeedometer value={Number(this.props.state.ul)} maxValue={5000} />\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                </Grid>\n                <div className=\"testGroup\">\n                    <div className=\"testArea\">\n                        <div className=\"testName\">Ping</div>\n                        <div id=\"pingText\" className=\"meterText\">{this.props.state.ping}</div>\n                        <div className=\"unit\">ms</div>\n                    </div>\n                    <div className=\"testArea\">\n                        <div className=\"testName\">Jitter</div>\n                        <div id=\"jitText\" className=\"meterText\">{this.props.state.jitter}</div>\n                        <div className=\"unit\">ms</div>\n                    </div>\n                </div>\n                <div id=\"ipArea\">\n                    IP Address: <span id=\"ip\">{this.props.state.ip}</span>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SpeedTestCard;","import React from 'react';\nimport { Component } from 'react';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport Button from '@material-ui/core/Button';\nimport SpeedTestCard from './SpeedTestCard';\n//import wifiWorker from './speedTest.worker.js'\n\nclass Wifi extends Component {\n    constructor() {\n        super();\n        this.state = {\n            dl: \"\",\n            ul: \"\",\n            ping: \"\",\n            jitter: \"\",\n            ip: \"\",\n            worker: null\n        };\n        this.worker = null;\n    }\n\n    componentDidMount() {\n        setInterval(() => {\n            if (this.worker !== null) this.worker.postMessage('status');\n        }, 200);\n    }\n\n    startStop() {\n        if (this.worker != null) {\n            //speedtest is running, abort\n            this.worker.postMessage('abort');\n            this.worker.addEventListener(\"message\", function (e) {\n                console.log(\"test is completed!\")\n            });\n            this.worker = null;\n            //I(\"startStopBtn\").className = \"\";\n            //initUI();\n        } else {\n            //test is not running, begin\n            this.worker = new Worker(\"./speedtest.worker.js\");\n            let wifi = { telemetry_level: \"basic\", time_dl: 5, time_ul: 5 };\n            //w.postMessage('start '+JSON.stringify(wifi)); //Add optional parameters as a JSON object to this command\n            this.worker.postMessage('start ' + JSON.stringify(wifi)); //Add optional parameters as a JSON object to this command\n            //I(\"startStopBtn\").className = \"running\";\n            this.worker.onmessage = function (e) {\n                let data = e.data.split(';');\n                let status = Number(data[0]);\n                if (status >= 4) {\n                    //test completed\n                    //I(\"startStopBtn\").className = \"\";\n                    this.worker = null;\n                }\n                this.setState({ ip: data[4] });\n                this.setState({ dl: data[1] });\n                this.setState({ ul: data[2] });\n                this.setState({ ping: data[3] });\n                this.setState({ jitter: data[5] });\n            }.bind(this);\n        }\n    }\n\n    submitData() {\n    }\n\n    render() {\n        return (\n            <div>\n                <body>\n                    <h1>東京大学教養学部学生自治会 UTokyoWiFiスピードテスト</h1>\n                    <Fab color=\"secondary\" variant=\"extended\" aria-label=\"delete\" onClick={() => this.startStop()}>start</Fab>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.submitData()}>\n                        送信\n                        <SendIcon />\n                    </Button>\n                    <SpeedTestCard state={this.state} />\n                </body>\n            </div>\n        );\n    }\n}\n\nexport default Wifi;","import React from 'react';\nimport { Component } from 'react';\nimport './App.css';\nimport Wifi from './Wifi.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { counter: 0 };\n  }\n  render(props, state) {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <title>東京大学教養学部学生自治会　UTokyo WiFiスピードテスト</title>\n        </header>\n        <Wifi />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}